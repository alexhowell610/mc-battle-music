plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0.24,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'io.github.0ffz.github-packages' version '[1,2)'
}

version = "${minecraft_version}-${mod_version}"
group = mod_group_id

base {
    archivesName = mod_id
}

/** Forge 1.20.1 runs on Java 17. */
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

minecraft {
    mappings channel: mapping_channel, version: mapping_version
    reobf = false
    copyIdeResources = true

    runs {
        configureEach {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            mods {
                "${mod_id}" { source sourceSets.main }
            }
        }
        client { property 'forge.enabledGameTestNamespaces', mod_id }
        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }
        gameTestServer { property 'forge.enabledGameTestNamespaces', mod_id }
        data {
            workingDirectory project.file('run-data')
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven { url = "https://maven.minecraftforge.net" }
    maven { url = "https://maven.parchmentmc.org" }

    // Aether Team GitHub Packages redirects (public)
    maven { url = "https://packages.aether-mod.net/The-Aether" }
    maven { url = "https://packages.aether-mod.net/Nitrogen" }

    // (optional fallbacks you may use for other deps)
    // maven { url = "https://api.modrinth.com/maven" }
    // maven { url = "https://cursemaven.com" }
}


dependencies {
    // Forge
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    // jopt-simple pin
    implementation('net.sf.jopt-simple:jopt-simple:5.0.4') { version { strictly '5.0.4' } }
}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
        minecraft_version        : minecraft_version,
        minecraft_version_range  : minecraft_version_range,
        forge_version            : forge_version,
        forge_version_range      : forge_version_range,
        loader_version_range     : loader_version_range,
        mod_id                   : mod_id,
        mod_name                 : mod_name,
        mod_license              : mod_license,
        mod_version              : mod_version,
        mod_authors              : mod_authors,
        mod_description          : mod_description,
    ]
    inputs.properties replaceProperties
    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
            'Specification-Title'   : mod_id,
            'Specification-Vendor'  : mod_authors,
            'Specification-Version' : '1',
            'Implementation-Title'  : project.name,
            'Implementation-Version': project.jar.archiveVersion,
            'Implementation-Vendor' : mod_authors
        ])
    }
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven { url "file://${project.projectDir}/mcmodsrepo" }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

sourceSets.each {
    def dir = layout.buildDirectory.dir("sourcesSets/$it.name")
    it.output.resourcesDir = dir
    it.java.destinationDirectory = dir
}
